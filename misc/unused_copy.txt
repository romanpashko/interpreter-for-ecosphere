Simply put, code interpreters allow language models to run the code they write. 

## Use Cases

Open Interpreter acts as a junior programmer that can execute code snippets to accomplish tasks.

1. Add subtitles to all videos in a folder.
2. Blur all faces in a photo or video.
4. Edit a large batch of documents.

...

> Having access to a very eager junior programmer working at the speed of your fingertips can make completely new workflows effortless and efficient, as well as open the benefits of programming to new audiences. - OpenAI

A GPT-4 powered code interpreter in your terminal.

# Open Interpreter

GPT-4 powered code interpreter in your terminal

Open Interpreter is a lightweight, open-source implementation of OpenAI's Code Interpreter.

```python
interpreter.chat("Add subtitles to video.mp4 on my Desktop.")
```
```
>>> On it. First, I'll check if any speech-to-text libraries are installed...
```


When GPT-4 writes code, it's executed on your local system



Simply run `pip install open-interpreter` then `interpreter` to talk to GPT-4 in your terminal.


lets you chat with GPT-4 in your terminal, and equips GPT-4 with one function: `exec()`. This function executes code locally and returns it output to GPT-4, which provides [several advantages](https://github.com/KillianLucas/open-interpreter#comparison-to-chatgpts-code-interpreter) over OpenAI's hosted interpreter.

Open Interpreter provides a minimal, [rich](https://github.com/Textualize/rich) text interface to a GPT-4 powered code interpreter that executes code locally.



Open Interpreter provides a minimal, [rich](https://github.com/Textualize/rich) text interface to GPT-4, and lets it run code locally. This provides [several advantages](https://github.com/KillianLucas/open-interpreter#comparison-to-chatgpts-code-interpreter) over OpenAI's hosted interpreter.

Open Interpreter provides a minimal, rich text interface to GPT-4, which can run Python code and reflect on its output. This code is executed locally, which provides several advantages over OpenAI's hosted interpreter.

Open-source ChatGPT in your terminal that can execute code.

Ask GPT-4 to run code locally.

Lightweight terminal interface for OpenAI's code interpreter that executes code locally.

Lightweight, open-source Code Interpreter implementation that installs new packages and run locally.

Open-source, GPT-4 powered Code Interpreter that installs new packages and runs locally.

Use OpenAI's Code Interpreter from your terminal.

OpenAI's Code Interpreter in Python. Lightweight, open-source.

Open-source ChatGPT in your terminal that can execute code.

Open-source Code Interpreter in your terminal that runs locally.

Combines the power of GPT-4's Code Interpreter with the flexibility of your local development environment.

## Features

- Provides GPT-4 access to an `exec(code)` function.
- Installs packages and executes code in your environment.
- Streams messages, code, and outputs directly to your terminal.


The main advantage of Open Interpreter over ChatGPT's interpreter is its local operation. Executing generated code locally bypasses multiple limitations:
- Internet access (runs `!pip` and `!apt-get` as needed)
- No filesize or timeout limits

It's Code Interpreter in your terminal.




The hosted Code Interpreter offered by OpenAI via ChatGPT shares some features with Open Interpreter, such as executing code. However, there are notable differences. The online interpreter can only operate for a maximum of 120 seconds and has file size restrictions. It also has a limited selection of pip packages, does not have internet access, and operates on a cloud server.

In contrast, Open Interpreter, being locally run, doesn't have these limitations. It can install any necessary packages, has access to the internet, can handle more extensive operations, and operates like a stateful Jupyter Notebook.

Esentially, running `interpreter` lets you talk to GPT-4 in your terminal, and equips GPT-4 with Python's `exec()` function.

Esentially, running `interpreter` lets you talk to a version of GPT-4 that has been equipped with Python's `exec()` function.