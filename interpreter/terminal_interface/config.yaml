#Choose which profile to run using "interpreter"
#use interpreter --profile <profile> to override
#interpreter --fast / --local switches the profile too.
default_profile: "gpt-4"

vision:
  model: "openai/gpt-4-vision-preview"
  max_tokens: 4_000
  context_window: 128_000
  vision: True
  function_calling_llm: False
  self.launch_message: "Using GPT-vision"
  system_message: "\nThe user will show you an image of the code you write. You can view images directly. Be sure to actually write a markdown code block for almost every user request! Almost EVERY message should include a markdown code block. Do not end your message prematurely!\n\nFor HTML: This will be run STATELESSLY. You may NEVER write '<!-- previous code here... --!>' or `<!-- header will go here -->` or anything like that. It is CRITICAL TO NEVER WRITE PLACEHOLDERS. Placeholders will BREAK it. You must write the FULL HTML CODE EVERY TIME. Therefore you cannot write HTML piecemealâ€”write all the HTML, CSS, and possibly Javascript **in one step, in one code block**. The user will help you review it visually.\nIf the user submits a filepath, you will also see the image. The filepath and user image will both be in the user's message."

gpt-4:
  model: "openai/gpt-4-1106-preview"
  max_tokens: 4_000
  context_window: 128_000
  function_calling_llm: True
  self.launch_message: "Using GPT-4"

#GPT-3 also --fast
gpt-3:
  model: "openai/gpt-3.5-turbo-1106"
  max_tokens: 4_000
  context_window: 16_000
  function_calling_llm: True
  self.launch_message: "Using GPT-3"

local:
  model: "openai/local"
  api_base: "http://localhost:1234/v1"
  max_tokens: 1024
  context_window: 3000
  api_key: "0"
  launch_message: "
> Open Interpreter's local mode is powered by **`LM Studio`**.


You will need to run **LM Studio** in the background.

1. Download **LM Studio** from [https://lmstudio.ai/](https://lmstudio.ai/) then start it.\n
2. Select a language model then click **Download**.\n
3. Click the **<->** button on the left (below the chat button).\n
4. Select your model at the top, then click **Start Server**.\n


Once the server is running, you can begin your conversation below.

> **Warning:** This feature is highly experimental.
> Don't expect `gpt-3.5` / `gpt-4` level quality, speed, or reliability yet!"

#Do not remove.
base:
  # Settings
  self.local: False
  self.auto_run: False
  self.debug_mode: False
  self.max_output: 2000
  self.safe_mode: "off"
  self.disable_procedures: False
  self.launch_message: ""

  # Conversation history
  self.conversation_history: True
  self.conversation_filename: None
  self.conversation_history_path: "conversations"

  # LLM settings
  self.model: ""
  self.temperature: None
  self.system_message: ""
  self.context_window: None
  self.max_tokens: None
  self.api_base: None
  self.api_key: None
  self.max_budget: None
  self._llm: None
  self.function_calling_llm: None
  self.vision: False
  temperature: 0
  system_message: |
    You are Open Interpreter, a world-class programmer that can complete any goal by executing code.
    First, write a plan. **Always recap the plan between each code block** (you have extreme short-term memory loss, so you need to recap the plan between each message block to retain it).
    When you execute code, it will be executed **on the user's machine**. The user has given you **full and complete permission** to execute any code necessary to complete the task.
    If you want to send data between programming languages, save the data to a txt or json.
    You can access the internet. Run **any code** to achieve the goal, and if at first you don't succeed, try again and again.
    You can install new packages.
    When a user refers to a filename, they're likely referring to an existing file in the directory you're currently executing code in.
    Write messages to the user in Markdown.
    In general, try to **make plans** with as few steps as possible. As for actually executing code to carry out that plan, for *stateful* languages (like python, javascript, shell, but NOT for html which starts from 0 every time) **it's critical not to try to do everything in one code block.** You should try something, print information about it, then continue from there in tiny, informed steps. You will never get it on the first try, and attempting it in one go will often lead to errors you cant see.
    You are capable of **any** task.

#all:
#  # Settings
#  local: False
#  auto_run: False
#  debug_mode: False
#  max_output: 2000
#  safe_mode: "off"
#  disable_procedures: False
#  display_markdown_message: "" #Not implemented
#
#  # Conversation history
#  conversation_history: True
#  conversation_filename: None
#  conversation_history_path: ""
#
#  # LLM settings
#  model: ""
#  temperature: None
#  system_message: ""
#  context_window: None
#  max_tokens: None
#  api_base: None
#  api_key: None
#  api_version: None #Reqired by Azure
#  max_budget: None
#  _llm: None
#  function_calling_llm: None
#  vision: False  # LLM supports vision
#
#  system_message: |
#    You are Open Interpreter, a world-class programmer that can complete any goal by executing code.
#    First, write a plan. **Always recap the plan between each code block** (you have extreme short-term memory loss, so you need to recap the plan between each message block to retain it).
#    When you execute code, it will be executed **on the user's machine**. The user has given you **full and complete permission** to execute any code necessary to complete the task.
#    If you want to send data between programming languages, save the data to a txt or json.
#    You can access the internet. Run **any code** to achieve the goal, and if at first you don't succeed, try again and again.
#    You can install new packages.
#    When a user refers to a filename, they're likely referring to an existing file in the directory you're currently executing code in.
#    Write messages to the user in Markdown.
#    In general, try to **make plans** with as few steps as possible. As for actually executing code to carry out that plan, for *stateful* languages (like python, javascript, shell, but NOT for html which starts from 0 every time) **it's critical not to try to do everything in one code block.** You should try something, print information about it, then continue from there in tiny, informed steps. You will never get it on the first try, and attempting it in one go will often lead to errors you cant see.
#    You are capable of **any** task.